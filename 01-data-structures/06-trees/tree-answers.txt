1.
Min Binary Heap:
  Pacific Rim: 72
  Braveheart: 78
  Star Wars: Return of the Jedi: 80
  Donnie Darko: 85
  Inception: 86
  The Matrix: 87
  District 9: 90

Binary Tree
  The Matrix: 87
  Pacific Rim: 72
  District 9: 90
  Braveheart: 78
  Star Wars: Return of the Jedi: 80
  Donnie Darko: 85
  Inception: 86

The binary tree seems less organized than the min heap. It doesn't reorganize nodes already in the tree. The heap, however compares everything above where the item in question is entered.

2.
Answers edited for clarity, not timing.

Insertion Section:
                         user     system      total        real
Min Heap Insert:     0.810000   0.000000   0.810000 (  0.813576)
Binary Tree Insert:  0.490000   0.010000   0.500000 (  0.495946)

Find String Section:
                              user     system      total        real
Min Heap Find 50000:      0.060000   0.000000   0.060000 (  0.060201)
Binary Tree Find 50000:   0.090000   0.010000   0.100000 (  0.088169)

Find Integer Section:
                              user     system      total        real
Min Heap Find 50000:      0.060000   0.000000   0.060000 (  0.059971)
Binary Tree Find 50000:   0.000000   0.000000   0.000000 (  0.000019)

Delete Section:
                                user     system      total        real
Min Heap Delete 50000:      0.120000   0.000000   0.120000 (  0.120356)
Binary Title Delete 50000:  0.000000   0.000000   0.000000 (  0.000026)

To insert 100,000 places in a Min Heap takes 0.810000 seconds whereas inserting the same number into a Binary Tree takes only 0.480000 seconds. It takes 68% longer to insert a node into a Min Heap.

Finding the number 50,000 using a string and the title takes 0.060000 seconds in the Min Heap but takes 0.000019 seconds in the Binary Tree. It takes 31% longer so searching in the binary tree takes significantly longer, if searching without the benefit of using numbers and being able to sort them.

Finding the number 50,000 using an integer and the title takes 0.060000 seconds in the Min Heap but takes 0.090000 seconds in the Binary Tree. It takes 3,156% longer so searching in the minimum heap takes an incredibly larger amount of time, if you're able to use the benefit of sorted numbers.

Deleting the number 50,000 takes 0.120000 seconds in the Min Heap but takes 0.000026 seconds in the Binary Tree due to the use of sorting via number rather than searching the entire heap. The Min Heap takes 4,629% longer.

I'd use a Binary Tree when the data being searched is sorted by numerical value.
